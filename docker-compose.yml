version: "3.7"

services:
  mautrix-instagram:
    container_name: mautrix-instagram
    image: dock.mau.dev/mautrix/instagram:latest
    restart: unless-stopped
    command: python3 -m mautrix_instagram -c /data/config.yaml --ignore-foreign-tables
    volumes:
      - ./mautrix-instagram:/data


    # If you put the service above in the same docker-compose as the homeserver,
    # ignore the parts below. Otherwise, see below for configuring networking.

    # If synapse is running outside of docker, you'll need to expose the port.
    # Note that in most cases you should either run everything inside docker
    # or everything outside docker, rather than mixing docker things with
    # non-docker things.
    # ports:
    #   - 29330:29330/tcp
    # You'll also probably want this so the bridge can reach Synapse directly
    # using something like `http://host.docker.internal:8008` as the address:
    # extra_hosts:
    #   - "synapse:8448"

    # If synapse is in a different network, then add this container to that network.
    # networks:
    #   - synapsenet
  synapse:
    build:
      context: ../..
      dockerfile: docker/Dockerfile
    image: docker.io/matrixdotorg/synapse:latest
    # Since synapse does not retry to connect to the database, restart upon
    # failure
    restart: unless-stopped
    # See the readme for a full documentation of the environment settings
    # NOTE: You must edit homeserver.yaml to use postgres, it defaults to sqlite
    environment:
      - SYNAPSE_SERVER_NAME=$(domain)
      - SYNAPSE_REPORT_STATS=yes
      - SYNAPSE_HTTP_PORT=8008
      - SYNAPSE_CONFIG_PATH=/data/homeserver.yaml
    volumes:
      # You may either store all the files in a local folder
      - ./files:/data
      # .. or you may split this between different storage points
      # - ./files:/data
      # - /path/to/ssd:/data/uploads
      # - /path/to/large_hdd:/data/media
    depends_on:
      - db
    # In order to expose Synapse, remove one of the following, you might for
    # instance expose the TLS port directly:
    ports:
      - 8008:8008/tcp
    # ... or use a reverse proxy, here is an example for traefik:
    # labels:
      # # The following lines are valid for Traefik version 1.x:
      # - traefik.enable=true
      # - traefik.frontend.rule=Host:fedora
      # - traefik.port=8008
      #
      # # Alternatively, for Traefik version 2.0:
      # - traefik.enable=true
      # - traefik.http.routers.http-synapse.entryPoints=http
      # - traefik.http.routers.http-synapse.rule=Host(`fedora`)
      # - traefik.http.middlewares.https_redirect.redirectscheme.scheme=https
      # - traefik.http.middlewares.https_redirect.redirectscheme.permanent=true
      # - traefik.http.routers.http-synapse.middlewares=https_redirect
      # - traefik.http.routers.https-synapse.entryPoints=https
      # - traefik.http.routers.https-synapse.rule=Host(`fedora`)
      # - traefik.http.routers.https-synapse.service=synapse
      # - traefik.http.routers.https-synapse.tls=true
      # - traefik.http.services.synapse.loadbalancer.server.port=8008
      # - traefik.http.routers.https-synapse.tls.certResolver=le-ssl

  db:
    image: docker.io/postgres:12-alpine
    # networks:
    #   - test_network
    # Change that password, of course!
    environment:
      - POSTGRES_USER=$(db_user)
      - POSTGRES_PASSWORD=$(db_pass)
      # ensure the database gets created correctly
      # https://element-hq.github.io/synapse/latest/postgres.html#set-up-database
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
      # - POSTGRES_INITDB_ARGS=--encoding=UTF8 --locale=C --template=template0 --owner=db_user test_db
    volumes:
      # You may store the database tables in a local folder..
      - ./schemas:/var/lib/postgresql/data
      # .. or store them on some high performance storage for better results
      # - /path/to/ssd/storage:/var/lib/postgresql/data
    # ports:
    #   - 5432:5432/tcp
